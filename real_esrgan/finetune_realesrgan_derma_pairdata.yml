# general settings
name: derma_v3    # set the experiment name
model_type: RealESRGANModel
scale: 2  # change to 4 if using x4 weights
num_gpu: auto
manual_seed: 42

# USM the ground-truth
l1_gt_usm: True
percep_gt_usm: True
gan_gt_usm: False

high_order_degradation: False # do not use the high-order degradation generation process

# dataset and data loader settings
datasets:
  train:
    name: derma
    type: RealESRGANPairedDataset
    dataroot_gt: /datasets/trainSet
    dataroot_lq: /datasets/trainSet
    meta_info: /datasets/meta_info/meta_info_Derma_sub_pair.txt
    io_backend:
      type: disk

    gt_size: 1024   #image size of Ground Thruth (in this case the High Resolution images)
    use_hflip: False
    use_rot: False

    # data loader
    use_shuffle: true
    num_worker_per_gpu: 2
    batch_size_per_gpu: 1
    dataset_enlarge_ratio: 1
    prefetch_mode: ~

  # Uncomment these for validation
  val:
    name: validation
    type: PairedImageDataset
    dataroot_gt: /datasets/valSet/highResolution_plus
    dataroot_lq: /datasets/valSet/lowResolution_512
    io_backend:
      type: disk

# network structures
network_g:
  type: RRDBNet
  num_in_ch: 3
  num_out_ch: 3
  num_feat: 64
  num_block: 23
  num_grow_ch: 32
  scale: 2    # change to 4 if using x4 weights

network_d:
  type: UNetDiscriminatorSN
  num_in_ch: 3
  num_feat: 64
  skip_connection: True

# path
path:
  # use the pre-trained Real-ESRNet model
  pretrain_network_g: experiments/pretrained_models/RealESRGAN_x2plus.pth
  param_key_g: params_ema
  strict_load_g: true
  pretrain_network_d: experiments/pretrained_models/RealESRGAN_x2plus_netD.pth
  param_key_d: params
  strict_load_d: true
  resume_state: ~

# training settings
train:
  ema_decay: 0.999
  optim_g:
    type: AdamW    # other options: Adam, SGD
    lr: !!float 5e-4 #!!float 1e-4 
    weight_decay: 0.01 #0
    betas: [0.9, 0.99]
  optim_d:
    type: AdamW    # Adam
    lr: !!float 5e-4     # other options: !!float 1e-4
    weight_decay: 0.01   #0
    betas: [0.9, 0.99]

  scheduler:
    type: MultiStepLR
    milestones: [15000,30000,45000,60000,75000,100000]  # set iteration points to where decrease the lr
    gamma: 0.5

  total_iter: 150000
  warmup_iter: -1  # no warm up

  # losses
  pixel_opt:
    type: CharbonnierLoss   # other options: L1Loss, WeightedTVLoss
    loss_weight: 1.0  # other options: !!float 0.01
    reduction: mean
  # perceptual loss (content and style losses)
  perceptual_opt:
    type: PerceptualLoss
    layer_weights:
      # before relu
      'conv1_2': 0.1
      'conv2_2': 0.1
      'conv3_4': 1
      'conv4_4': 1
      'conv5_4': 1
    vgg_type: vgg19
    use_input_norm: true
    perceptual_weight: !!float 1.0
    style_weight: 0
    range_norm: false
    criterion: l1
  # gan loss
  gan_opt:
    type: GANLoss
    gan_type: wgan    # other options: vanilla, lsgan, wgan_softplus
    real_label_val: 1.0
    fake_label_val: 0.0
    loss_weight: !!float 1e-1    # other options: !!float 0.005

  net_d_iters: 1
  net_d_init_iters: 0

# Uncomment these for validation
# validation settings
val:
  val_freq: !!float 5e3
  save_img: True

  metrics:
    psnr: # metric name
      type: calculate_psnr
      crop_border: 0
      test_y_channel: true      
    ssim: # metric name
      type: calculate_ssim
      crop_border: 0
      test_y_channel: false
    #niqe: #metric name
     # type: calculate_niqe
      #crop_border: 0
      #input_order: 'CHW'
      #convert_to: 'y'

# logging settings
logger:
  print_freq: 1000
  save_checkpoint_freq: !!float 5e3
  use_tb_logger: true
  wandb:
    project: ~
    resume_id: ~

# dist training settings
dist_params:
  backend: nccl
  port: 29500
